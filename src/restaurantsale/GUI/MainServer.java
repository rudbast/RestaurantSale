/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package restaurantsale.GUI;

import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import restaurantsale.Tools.RequestHandler;
import restaurantsale.Tools.TCPServer;

/**
 *
 * @author rudolf
 */
public class MainServer extends javax.swing.JFrame {

    /**
     * Creates new form MainView
     */
    public MainServer() {
        initComponents();
        this.clientIPList = new ArrayList<String>();
        this.queueSender = new QueueSender(6788);

        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                tcpServer.start();
                updateTableQueue(RequestHandler.decodeMessage("SQUE"));
                updateTableDone(RequestHandler.decodeMessage("CHD"));
                // hide column 4 (NO)
                tabQueue.removeColumn(tabQueue.getColumnModel().getColumn(3));
            }
        });
    }

    // Custom variables
    private TCPServer tcpServer = new TCPServer(this);
    private final QueueSender queueSender;
    private final ArrayList<String> clientIPList;

    // Custom methods
    public synchronized void updateTableQueue(String format) {
        DefaultTableModel model = (DefaultTableModel) tabQueue.getModel();
        while(model.getRowCount() > 0) model.removeRow(0);

        if(format.equals("")) return;
        String[] line = format.split(":"), part;
        for(int i=0; i<line.length; ++i){
            part = line[i].split("\\.");
            model.addRow(new Object[]{part[0], part[1], part[2], part[3]});
        }
    }

    public synchronized void updateTableDone(String format) {
        DefaultTableModel model = (DefaultTableModel) tabDone.getModel();
        while(model.getRowCount() > 0) model.removeRow(0);

        if(format.equals("")) return;
        String[] line = format.split(":"), part;
        for(int i=0; i<line.length; ++i){
            part = line[i].split("\\.");
            model.addRow(new Object[]{part[0], part[1], part[2]});
        }
    }

    public void checkClientIP(String IP_ADDRESS) {
        for(int i=0; i<clientIPList.size(); ++i){
            if(clientIPList.get(i).equals(IP_ADDRESS))
                return;
        }
        clientIPList.add(IP_ADDRESS);
    }

    public synchronized void sendToAllClient(String message) {
        updateTableQueue(RequestHandler.decodeMessage("SQUE"));
        for(int i=0; i<clientIPList.size(); ++i)
            queueSender.sendMessage(clientIPList.get(i), message);
    }

    // Custom classes
    private class QueueSender {
        DataOutputStream out;
        Socket socket;
        String IP_ADDRESS;
        int PORT;
        String message;

        public QueueSender(int PORT) {
           this.PORT = PORT;
        }

        public void sendMessage(String IP_ADDRESS, String message) {
            this.message = message;

            try{
                socket = new Socket(IP_ADDRESS, PORT);
                out = new DataOutputStream(socket.getOutputStream());
//                System.out.println("sending queue update to : " + IP_ADDRESS);

                out.writeUTF(message);
            } catch (UnknownHostException e){
                System.out.println("Sock: "+e.getMessage());
            } catch (EOFException e){
                System.out.println("EOF: "+e.getMessage());
            } catch (IOException e){
                System.out.println("IO: "+e.getMessage());
            } finally {
                try {
                    socket.close();
                } catch (IOException e) {
                    System.out.println(e.getMessage());
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labTable = new javax.swing.JLabel();
        spQueue = new javax.swing.JScrollPane();
        tabQueue = new javax.swing.JTable();
        paneDone = new javax.swing.JPanel();
        spDone = new javax.swing.JScrollPane();
        tabDone = new javax.swing.JTable();
        btnDone = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SERVER");
        setExtendedState(6);

        labTable.setFont(new java.awt.Font("DejaVu Sans", 1, 36)); // NOI18N
        labTable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labTable.setText("ORDER QUEUE");

        tabQueue.setFont(new java.awt.Font("DejaVu Sans", 1, 26)); // NOI18N
        tabQueue.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NAME", "TABLE NO", "QTY", "NO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabQueue.setEnabled(false);
        tabQueue.setRowHeight(30);
        tabQueue.getTableHeader().setReorderingAllowed(false);
        spQueue.setViewportView(tabQueue);
        if (tabQueue.getColumnModel().getColumnCount() > 0) {
            tabQueue.getColumnModel().getColumn(0).setResizable(false);
            tabQueue.getColumnModel().getColumn(0).setPreferredWidth(250);
            tabQueue.getColumnModel().getColumn(1).setResizable(false);
            tabQueue.getColumnModel().getColumn(1).setPreferredWidth(50);
            tabQueue.getColumnModel().getColumn(2).setResizable(false);
            tabQueue.getColumnModel().getColumn(2).setPreferredWidth(50);
            tabQueue.getColumnModel().getColumn(3).setResizable(false);
        }

        paneDone.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "FINISHED ORDER", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 1, 12), java.awt.Color.green)); // NOI18N

        tabDone.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        tabDone.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NAME", "TABLE NO", "QTY"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabDone.setEnabled(false);
        tabDone.setRowHeight(24);
        tabDone.getTableHeader().setReorderingAllowed(false);
        spDone.setViewportView(tabDone);
        if (tabDone.getColumnModel().getColumnCount() > 0) {
            tabDone.getColumnModel().getColumn(0).setResizable(false);
            tabDone.getColumnModel().getColumn(0).setPreferredWidth(200);
            tabDone.getColumnModel().getColumn(1).setResizable(false);
            tabDone.getColumnModel().getColumn(1).setPreferredWidth(50);
            tabDone.getColumnModel().getColumn(2).setResizable(false);
            tabDone.getColumnModel().getColumn(2).setPreferredWidth(50);
        }

        javax.swing.GroupLayout paneDoneLayout = new javax.swing.GroupLayout(paneDone);
        paneDone.setLayout(paneDoneLayout);
        paneDoneLayout.setHorizontalGroup(
            paneDoneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spDone, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
        );
        paneDoneLayout.setVerticalGroup(
            paneDoneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spDone, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
        );

        btnDone.setBackground(new java.awt.Color(0, 153, 51));
        btnDone.setFont(new java.awt.Font("DejaVu Sans", 1, 24)); // NOI18N
        btnDone.setText("DONE");
        btnDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addComponent(labTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDone, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(paneDone, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spQueue, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labTable, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                    .addComponent(btnDone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spQueue, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paneDone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoneActionPerformed
        // change the first line of current order queue's status to DONE
        if(tabQueue.getRowCount() == 0) return;
        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));

        final String NAME, TABLE_NO, message, QTY, NO;
        NAME = tabQueue.getValueAt(0, 0).toString();
        TABLE_NO = tabQueue.getValueAt(0, 1).toString();
        QTY = tabQueue.getValueAt(0, 2).toString();
        NO = tabQueue.getModel().getValueAt(0, 3).toString();

        message = "DNE;" + TABLE_NO + ";" + NAME + ";" + QTY + ";" + NO;

        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                updateTableQueue(RequestHandler.decodeMessage(message));
                updateTableDone(RequestHandler.decodeMessage("CHD"));
                sendToAllClient(RequestHandler.decodeMessage("QUE"));
            }
        });
        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnDoneActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainServer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDone;
    private javax.swing.JLabel labTable;
    private javax.swing.JPanel paneDone;
    private javax.swing.JScrollPane spDone;
    private javax.swing.JScrollPane spQueue;
    private javax.swing.JTable tabDone;
    private javax.swing.JTable tabQueue;
    // End of variables declaration//GEN-END:variables
}